<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:attach="clr-namespace:WYW.UI.Controls.Attach"
                    xmlns:command="clr-namespace:WYW.UI.Commands">
    <ControlTemplate x:Key="TextBoxErrorTemplate">
        <StackPanel Orientation="Horizontal" >
            <AdornedElementPlaceholder x:Name="adorner"  Margin="5,0"/>
            <Popup Name="popup" AllowsTransparency="True" Placement="Right" >
                <Border x:Name="errorBorder" Background="{StaticResource TextBox.BackgroundValidationError}" Margin="8,0,0,0" 
                                Opacity="0" CornerRadius="0"
                                IsHitTestVisible="False"
                        SnapsToDevicePixels="True"
                                MinHeight="{DynamicResource TextElement.Height}">
                    <TextBlock Text="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent}"
                                Foreground="{StaticResource TextBox.ForegroundValidationError}" Margin="5,2" TextWrapping="Wrap" VerticalAlignment="Center"/>
                </Border>
            </Popup>
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding ElementName="adorner" Path="AdornedElement.IsKeyboardFocused"/>
                </DataTrigger.Binding>
                <DataTrigger.Setters>
                    <Setter Property="IsOpen" TargetName="popup" Value="true"/>
                </DataTrigger.Setters>
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="fadeInStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="00:00:00.15"
                                                         Storyboard.TargetName="errorBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="fadeInStoryboard"/>
                    <BeginStoryboard x:Name="fadeOutStoryBoard">
                        <Storyboard>
                            <DoubleAnimation Duration="00:00:00"
                                                         Storyboard.TargetName="errorBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="TextBoxBaseStyle" TargetType="{x:Type TextBox}" >
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
        <Setter Property="Background" Value="{StaticResource Control.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="{DynamicResource Control.VerticalMargin}"/>
        <Setter Property="Padding" Value="{DynamicResource Text.Margin}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="SelectionBrush" Value="{StaticResource Item.BackgroundSelected}"/>
        <Setter Property="MinHeight" Value="{DynamicResource TextElement.Height}"/>

        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource TextBoxErrorTemplate}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Path=(attach:TextBoxElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="{Binding Path=(attach:TextBoxElement.SuffixWidth),RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="{Binding Path=(attach:TextBoxElement.Title),RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Grid Grid.Column="1" Name="MainGrid" >
                            <Border x:Name="Bd" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="true"
                                CornerRadius="{Binding Path=(attach:TextBoxElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid>
                                    <TextBlock x:Name="InputHint" Text="{Binding Path=(attach:TextBoxElement.InputHint),RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Padding="{TemplateBinding Padding}"
                                                            Opacity="0.6" Visibility="Collapsed"
                                                            Foreground="{TemplateBinding Foreground}"/>
                                    <ScrollViewer x:Name="PART_ContentHost" RenderOptions.ClearTypeHint="Enabled"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  
                                                                Padding="{TemplateBinding Padding}"/>
                                    <TextBlock  Text="*" Foreground="Red"  HorizontalAlignment="Right" Margin="0,0,5,0"
                                                            Visibility="{Binding Path=(attach:TextBoxElement.IsNecessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource ConstToVisibilityConverter}}"/>
                                    <Button Grid.Column="2" Margin="0,0,5,0" attach:ButtonElement.IsNoBorder="True" HorizontalAlignment="Right"
                                            attach:ButtonElement.IcoGeometry="{StaticResource RemoveGeometry}"
                                            attach:ButtonElement.IcoHeight="16"
                                            attach:ButtonElement.IcoWidth="16"
                                            Command="{x:Static command:TextBoxCommand.ClearCommand}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=TextBox}}"
                                            x:Name="ClearButton" 
                                            Visibility="Collapsed"/>
                                </Grid>
                            </Border>

                            <Popup x:Name="PopupHint" PlacementTarget="{Binding ElementName=PART_ContentHost}" AllowsTransparency="True" Focusable="False" Placement="Top"  PopupAnimation="Slide">
                                <Grid Visibility="{Binding Path=(attach:TextBoxElement.PopupHint),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource ConstToVisibilityConverter}}">
                                    <StackPanel>
                                        <Border CornerRadius="{DynamicResource Control.CornerRadius}" 
                                                SnapsToDevicePixels="True"
                                                BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}"
                                                Background="{StaticResource Item.BackgroundSelected}">
                                            <TextBlock Text="{Binding Path=(attach:TextBoxElement.PopupHint),RelativeSource={RelativeSource TemplatedParent}}" Margin="8,6" 
                                                       Foreground="{StaticResource Item.ForegroundSelected}" 
                                                       HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                        <Polygon Points="0,0 10,0 5,5 0,0" 
                                                 Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0"
                                                 Fill="{StaticResource Item.BackgroundSelected}" Margin="10,0,0,0"/>
                                        <Grid Height="5"/>
                                    </StackPanel>
                                </Grid>
                            </Popup>
                        </Grid>
                        <TextBlock Grid.Column="3" Margin="{DynamicResource Control.LeftMargin}" Text="{Binding Path=(attach:TextBoxElement.Suffix),RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="attach:TextBoxElement.Title" Value="{x:Null}">
                            <Setter Property="attach:TextBoxElement.TitleWidth" Value="0"/>
                        </Trigger>
                        <Trigger Property="attach:TextBoxElement.Suffix" Value="{x:Null}">
                            <Setter Property="attach:TextBoxElement.SuffixWidth" Value="0"/>
                        </Trigger>
                        <Trigger Property="attach:TextBoxElement.IsCircleCorner" Value="True">
                            <Setter Property="attach:TextBoxElement.CornerRadius" Value="{Binding ActualHeight,RelativeSource={RelativeSource Self},Converter={StaticResource CircleCornerRadiusConverter}}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="true">
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="Opacity" Value="0.6" TargetName="PART_ContentHost"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushHover}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsReadOnly" Value="false"/>
                                <Condition Property="attach:TextBoxElement.ShowClearButton" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ClearButton" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushFocused}"/>
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter  Property="BorderBrush" Value="{StaticResource TextBox.BackgroundValidationError}"/>
                        </Trigger>

                        <Trigger Property="Text" Value="">
                            <Setter TargetName="InputHint" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="PopupHint" Property="IsOpen" Value="true"/>
                            <Setter TargetName="InputHint" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="MainGrid" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="InputHint" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxBaseStyle}"/>

    <!--DataGridTextColumn的TextBox格式-->
    <Style x:Key="DataGridTextEditStyle"  TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxBaseStyle}">
        <Setter Property="MinHeight"  Value="10"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="{DynamicResource Text.HorizontalMargin}"/>
    </Style>
</ResourceDictionary>